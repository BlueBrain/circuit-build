%YAML 1.1
---
$schema: 'http://json-schema.org/draft-07/schema#'
$id: 'https://bbp.epfl.ch/schemas/nse/circuit-build/v1/manifest.yaml'
type: object
additionalProperties: false
required:
  - common
properties:
  common:
    type: object
    additionalProperties: false
    required:
      - atlas
      - morph_release
      - node_population_name
      - edge_population_name
    properties:
      atlas:
        description: |
          Atlas URL in VoxelBrain or local folder path.
        type: string
        example: '/gpfs/bbp.cscs.ch/project/proj66/entities/dev/atlas/O1-152'
      region:
        description: |
          Defines the Atlas Region to populate (must be a subset of the atlas).

          If omitted, the region mask is not applied.
        type: string
        example: 'mc2_Column'
      mask:
        description: |
          Defines a volumetric mask to populate (must be a subset of the atlas).

          If provided, looks for the corresponding dataset in the atlas.
          Could be used both with or without **region** (in the former case, two masks are intersected).

          If omitted, the volumetric mask is not applied.
        type: string
        example: '[mask]mc2'
      morph_release:
        description: |
          Path to morphology release folder.
          It should contain:

          * ``h5v1`` folder with morphologies in H5v1 format
          * ``ascii`` folder with morphologies in ASC format
          * ``annotations.json`` file with compacted annotations used for placement, created with `compact-annotations` in the `placement-algorithm` module

          .. tip::

            Since `morph_release` entity is not properly formalized yet, different tools might have
            different opinion how ``h5v1`` folder should be named. To be on a safe side, we recommend providing
            also ``h5`` and ``v1`` *aliases* in addition to ``h5v1``.
        type: string
        example: '/gpfs/bbp.cscs.ch/project/proj66/entities/morphologies/2018.02.16'
      emodel_release:
        description: |
          Path to emodel release folder. It should contain:

          * ``hoc`` folder with model HOC templates
          * ``mecombo_emodel.tsv`` file with *me_combo* parameters
        type: string
        example: '/gpfs/bbp.cscs.ch/project/proj66/entities/emodels/2018.02.26.dev0'
      synthesize_emodel_release:
        description: |
          Path to emodel release folder for synthesis. It should contain the output of bluepyemodel.apps.emodel_release.create_emodel_release.
        type: string
        example: /gpfs/bbp.cscs.ch/project/proj82/entities/emodels/test_release

      node_population_name:
        description: |
          Name of Sonata nodes population to produce. It *should* follow the naming guidelines in the
          `documentation <https://sonata-extension.readthedocs.io/en/latest/sonata_population.html#nodes>`_.
          Additionally this name will be used for the parent folder of the produced Sonata nodes file under
          `sonata/networks/nodes/` folder.
        type: string
        example: 'neocortex_neurons'
      edge_population_name:
        description: |
          Name of Sonata edges population to produce. It *should* follow the naming guidelines in the
          `documentation. <https://sonata-extension.readthedocs.io/en/latest/sonata_population.html#edges>`_.
          Additionally this name will be used for the parent folder of the produced Sonata nodes file under
          `sonata/networks/edges/` folder.
        type: string
        example: 'neocortex_neurons__chemical_synapse'
      synthesis:
        description: |
          If ``true``, create synthesized dendrites using `region-grower`'s `synthesize-morphologies` functionality.
             This happens after placing axons in space based on the placement hints method.

          .. note::

             1. ``extNeuronDB.dat`` is no longer used.

                Instead, one should provide ``neurondb-axon.dat`` file with a list of morphologies to be used as "axon donors" for synthesized dendritic trees.

             2. Synthesis requires two additional files in ``bioname`` folder:

                * ``tmd_distributions.json``
                * ``tmd_parameters.json``
        type: boolean
        default: false
      no_index:
        description: |
          If ``true``,  skip the creation of indexes when executing the `functional` rule.
        type: boolean
        default: false
      no_emodel:
        description: |
          If ``true``,  skip the emodel tasks for synthesis (compute_ais_scales and compute_currents)
        type: boolean
        default: false
      partition:
        description: |
          | Define the list of non-overlapping nodesets to touchdetect and functionalize separately.
          | To process the right and left hemispheres, you should define two nodesets
            in the target definitions file, and list their names here.
          | This option has effect only when the ``synthesis`` parameter is ``True``.
          | Optional, if not specified the full node population is processed.
        type: array
        items:
          type: string
        uniqueItems: true
        default: []
        example: ['left', 'right']

  place_cells:
    type: object
    additionalProperties: false
    required:
      - soma_placement
    properties:
      soma_placement:
        description: |
          Soma placement method used by `BrainBuilder`.

          Could be either *basic* for uniform random placement; or *poisson_disc* for `Poisson disc sampling
          <https://bbpteam.epfl.ch/project/spaces/display/BBPNSE/On+sampling+methods+to+generate+cell+positions>`_.
        type: string
        example: 'basic'
      density_factor:
        description: |
          Multiply all mtype densities specified in the cell composition recipe by the given factor.

          Optional; if omitted, mtype densities are used as-is.
        type: number
        default: 1.0
      atlas_property:
        description: |
          Properties to assign based on auxiliary volumetric datasets.

          More specifically, it is a mapping like:

          ::

              place_cells:
                  ...
                  atlas_property:
                      hypercolumn: 'column'
                      region: '~brain_regions'

          where key is the property name to use in *Cells* (``hypercolumn``, ``region`` in the example above), and value is the name of volumetric dataset to query (``column``, ``brain_regions``).
          The corresponding atlas dataset would be queried at cell positions, and the result values would go to *Cells*.
          If dataset name is prefixed with ``~``, values from the dataset would be interpreted as region IDs and re-mapped to region acronyms using atlas ``hierarchy.json``.

          This mechanism provides flexibility in choosing how to assign ``region`` property in *Cells*.
          For instance, when building a model of Neocortex, one can opt for assigning ``region`` without layers (i.e., ``SSp-ll`` instead of ``SSp-ll[1-6]``.
          It also allows to embed additional properties like cell position in brain region-specific coordinate system; or column ID for artificial mosaic circuits.

          .. note::

            If you need to create a property to identify the hemisphere, you can proceed in one of two possible ways:
  
            1. `Recommended`. Specify `hemisphere` as the name of the property, and the name of the volumetric dataset
               containing the hemisphere information as the value.
  
               The values of the dataset are converted and assigned to the `hemisphere` property in *Cells*.
               See also `scalar field <https://bbpteam.epfl.ch/project/spaces/display/NRINF/Scalar+Value+Image>`__
               and :ref:`ref-atlas` for more information about the expected values in the dataset.
  
               ::
  
                   place_cells:
                       ...
                       atlas_property:
                           region: '~brain_regions'
                           hemisphere: 'hemisphere'
                       append_hemisphere: True  # if desired, see below
  
            2. `Deprecated`. Use the special value ``FAST-HEMISPHERE`` in place of the dataset name.
  
               Unlike regular atlas-based property, no volumetric dataset would be queried;
               cell property values would be chosen based on Z-coordinate: ``(z < 5700) ? "left" : "right")``.
  
               ::
  
                   place_cells:
                       ...
                       atlas_property:
                           region: '~brain_regions'
                           hemisphere: 'FAST-HEMISPHERE'
                       append_hemisphere: True  # if desired, see below

          .. warning::

              | Please note that it's mandatory to define ``region`` property.
              | For backwards compatibility, if **atlas_property** section is missing from ``MANIFEST.yaml``, it will default to ``{'region': '~brain_regions'}``.
        type: object
        default: {'region': '~brain_regions'}
      append_hemisphere:
        description: |
          | If set to ``True``, ``hemisphere`` values would be appended to ``region`` (i.e., ``SSp-ll@left`` instead of ``SSp-ll``).
          | ``region`` and ``hemisphere`` should be specified using **atlas_property** mechanism.
        type: boolean
        default: false
      sort_by:
        description: |
          Sort *Cells* by properties values.

          | A list of properties is anticipated (e.g., ``['region', 'mtype']``).
          | If omitted, cells are not sorted in any particular order
        type: array
        items:
          type: string
        uniqueItems: true
        example: ['region', 'mtype']
      mini_frequencies:
        description: |
          | If ``True``, the mini frequencies file ``mini_frequencies.tsv`` inside bioname is used.
          | Optional, if omitted defaults to ``False``.
        type: boolean
        example: true
      seed:
        description: |
          Pseudo-random generator seed.
        type: integer
        default: 0

  choose_morphologies:
    type: object
    additionalProperties: false
    required:
      - alpha
    properties:
      alpha:
        description: |
          Use `score ** alpha` as morphology choice probability.
        type: number
        example: 3.0
      seed:
        description: |
          Pseudo-random generator seed.
        type: integer
        default: 0
      scales:
        description: |
          | Scaling factors to try for each axon, used only for `synthesis`.
          | Optional, if not provided axons would be checked "as is", with no scaling applied.
        type: array
        items:
          type: number
        uniqueItems: false
        example: [0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3]

  assign_morphologies:
    type: object
    additionalProperties: false
    properties:
      max_drop_ratio:
        description: |
          | Maximal ratio of positions that can be dropped for each mtype (due to failure to pick an morphology).
          | Optional, if not provided defaults to 0.0 (i.e., no position dropping allowed).
        type: number
        default: 0.0
        example: 0.1
      rotations:
        description: |
          | :ref:`Rotations definitions <ref-bioname-rotations>` file in YAML format, that should be located in the ``bioname`` folder.
          | Optional, if the file is not specified, apply by default a random rotation with uniform angle distribution around the Y-axis (the principal direction of the morphology).
        type: string
        example: rotations.yaml
      seed:
        description: |
          Pseudo-random generator seed.
        type: integer
        default: 0

  synthesize_morphologies:
    type: object
    additionalProperties: false
    properties:
      max_drop_ratio:
        description: |
          | Maximal ratio of positions that can be dropped for each mtype (due to failure to pick an axon).
          | Optional, if not provided defaults to 0.0 (i.e., no position dropping allowed).
        type: number
        default: 0.0
      max_files_per_dir:
        description: |
          | Maximal number of files per folder in hierarchical morphologies folder.
          | Optional, if not provided defaults to 1024.
        type: integer
        default: 1024
      scaling_jitter_std:
        description: |
          | Apply scaling jitter to all axon sections with the given std (float).
          | Optional, if not provided the scaling jitter is not applied.
        type: number
      rotational_jitter_std:
        description: |
          | Apply rotational jitter to all axon sections with the given std (float).
          | Optional, if not provided the rotational jitter is not applied.
        type: number
      out_debug_data:
        description: |
          | Export the debug data of each cell to this file.
          | Optional, if not specified the debug data are not exported.
        type: string
      log_level:
        description: |
          | Logging level, any of ``debug``, ``info``, ``warning``, ``error``, ``critical``.
          | Optional, if not specified defaults to ``info``.
        enum: ['debug', 'info', 'warning', 'error', 'critical']
        default: 'info'
      seed:
        description: |
          Pseudo-random generator seed.
        type: integer
        default: 0
      synthesize_axons:
        description: |
          Set to true to synthesize axons instead of grafting
        type: boolean
        default: false

  assign_emodels:
    type: object
    additionalProperties: false
    properties:
      seed:
        description: |
          Pseudo-random generator seed.
        type: integer
        default: 0

  node_sets:
    type: object
    additionalProperties: false
    properties:
      targets:
        description: |
          :ref:`Target definitions <ref-bioname-targets>` file to use for generating ``node_sets.json``.

          Should be located in ``bioname`` folder.
        type: string
        example: 'targets.yaml'
      allow_empty:
        description: |
          Allow query-based targets to resolve empty GID set.
        type: boolean
        default: false

  touchdetector:
    type: object
    additionalProperties: false
    properties:
      touchspace:
        description: |
          Override the touch space.
        type: string
        default: 'axodendritic'

  spykfunc_s2f:
    type: object
    additionalProperties: false
    properties:
      filters:
        description: |
          Run a list of custom filters. If specified, the following filters must be included:
          - ``BoutonDistance``
          - ``TouchRules``
          - ``ReduceAndCut``
          - ``SynapseProperties``
        type: array
        items:
          type: string
        uniqueItems: true
        default: []

  spykfunc_s2s:
    type: object
    additionalProperties: false
    properties:
      filters:
        description: |
          Run a list of custom filters. If specified, the following filters must be included:
          - ``BoutonDistance``
          - ``SynapseProperties``
        type: array
        items:
          type: string
        uniqueItems: true
        default: []

  subcellular:
    type: object
    additionalProperties: false
    required:
      - transcriptome
      - mtype_taxonomy
      - cell_proteins
      - synapse_proteins
      - seed
    properties:
      transcriptome:
        description: |
          A Nexus *transcriptomeexperiment* instance with a CSV attachment file containing all the data
              related to gene expressions. The attachment file is formatted as follow.

              The first 10 rows should be ``tissue``, ``group #``, ``total mRNA mol``, ``well``, ``sex``,
              ``age``, ``diameter``, ``cell_id``, ``level1class``, ``level2class`` for each cells.
              Each column of this first table should be the corresponding values for all cells.

              The rows from 12 to the end should contain the corresponding gene expressions for each cells.

              The exact formatting must be:

              +----------+------------------+-------------------+-------------------+
              |          | tissue           |   sscortex        |  sscortex         |
              +----------+------------------+-------------------+-------------------+
              |          |  group #         |   1               |  4                |
              +----------+------------------+-------------------+-------------------+
              |          |  total mRNA mol  |   21580           |  7267             |
              +----------+------------------+-------------------+-------------------+
              |          |  well            |   11              |  89               |
              +----------+------------------+-------------------+-------------------+
              |          |  sex             |   1               |  -1               |
              +----------+------------------+-------------------+-------------------+
              |          |  age             |   21              |  23               |
              +----------+------------------+-------------------+-------------------+
              |          |  diameter        |   0               |  10.8             |
              +----------+------------------+-------------------+-------------------+
              |          |  cell_id         |   1772071015_C02  |  1772071041_A12   |
              +----------+------------------+-------------------+-------------------+
              |          |  level1class     |   interneurons    |  oligodendrocytes |
              +----------+------------------+-------------------+-------------------+
              |          |  level2class     |   Int10           |  Oligo5           |
              +----------+------------------+-------------------+-------------------+
              |          |                  |                   |                   |
              +----------+------------------+-------------------+-------------------+
              | Tspan12  |        1         |        0          |         0         |
              +----------+------------------+-------------------+-------------------+
              | Tshz1    |        1         |        3          |         1         |
              +----------+------------------+-------------------+-------------------+
              | Fnbp1l   |        1         |        3          |         1         |
              +----------+------------------+-------------------+-------------------+
              | Adamts15 |        1         |        1          |         0         |
              +----------+------------------+-------------------+-------------------+

          See:
          https://bbp-nexus.epfl.ch/staging/explorer/ngv/synprot/transcriptomeexperiment/v0.1.0/550179e8-496a-44e7-be74-0fc2cc8f3c52
          for a complete example.
        type: string
      mtype_taxonomy:
        description: |
          A *mtypetaxonomy* Nexus instance with a tsv attachment file containing the mapping mtypes
          to their morph class (Interneuron / Pyramidal) and synapse class (Excitatory / Inhibitory).

          For instance:

          +-----------+-----------+-----------+
          |  mtype    |   mClass  |   sClass  |
          +===========+===========+===========+
          |  L23_NGC  |   INT     |    INH    |
          +-----------+-----------+-----------+
          |  L23_SBC  |   INT     |    INH    |
          +-----------+-----------+-----------+
          |  L2_IPC   |   PYR     |    EXC    |
          +-----------+-----------+-----------+

          See:
          https://bbp-nexus.epfl.ch/staging/explorer/ngv/synprot/mtypetaxonomy/v0.1.0/f5c1beac-3245-48e6-8336-c2189a1c37be
          for a complete example.
        type: string
      cell_proteins:
        description: |
          A *cellproteinconcexperiment* Nexus instance with a tsv attachment file containing the
          concentration of each gene in each organelle.

          Columns correspond to the different organelle and rows to the different genes. The values
          are the concentrations in [nM] (nanomoles / litre) of each gene in each organelle as
          a floating point.

          As of today, the mandatory columns to provide are:

          - Lead gene name
          - Canonical lead protein ID
          - Majority protein IDs
          - Protein names
          - Median cellular concentration [nM]
          - Median Cytosol concentration [nM]
          - Median nuclear concentration [nM]
          - Median ER concentration [nM]
          - Median Endosome concentration [nM]
          - Median Golgi apparatus concentration [nM]
          - Median Lysosome concentration [nM]
          - Median Mitochondrion concentration [nM]
          - Median Peroxisome concentration [nM]
          - Median Plasma membrane concentration [nM]
          - Median Cytosol concentration [nM].1

          See:
          https://bbp-nexus.epfl.ch/staging/explorer/ngv/synprot/cellproteinconcexperiment/v0.1.5/fcb284f3-6143-46a6-a34a-3cd8ea7277ba
          for a complete example.
        type: string
      synapse_proteins:
        description: |
          A *synapticproteinconcexperiment* Nexus instance with a tsv attachment file containing the
          concentration of each gene inside the different kind of synapses.

          The attachment file must contain at least four columns:

          - gene names Linerson
          - PSD excitatory, #/um^2
          - PSD inhibitory, #/um^2
          - Presynaptic terminals, nM

          Rows correspond to the gene name and concentrations.

          Example:

          +-----------------------+---------------------------+--------------------------+-----------------------------+
          |  gene names Linerson  |   PSD excitatory, #/um^2  |  PSD inhibitory, #/um^2  | Presynaptic terminals, nM   |
          +=======================+===========================+==========================+=============================+
          |        Camk2a         |            24570          |             0            |               71950         |
          +-----------------------+---------------------------+--------------------------+-----------------------------+
          |        Camk2b         |             5730          |             0            |               17150         |
          +-----------------------+---------------------------+--------------------------+-----------------------------+
        type: string
      seed:
        description: |
          Pseudo-random generator seed.
        type: integer

  modules:
    description: |
      Modules to be overwritten; multiple configurations are allowed.
    type: array
    items:
      type: string
      pattern: '^([a-zA-Z0-9_-]+):([a-zA-Z0-9/._-]+)(,[a-zA-Z0-9/._-]+)*(:[^:]+)?$'
    uniqueItems: true
    example:
      - brainbuilder:archive/2020-08,brainbuilder/0.14.0
      - touchdetector:archive/2020-05,touchdetector/5.4.0,hpe-mpi
      - spykfunc:archive/2020-06,spykfunc/0.15.6:/gpfs/bbp.cscs.ch/ssd/apps/bsd/modules/_meta

  bioname:
    description: |
      Path to `bioname` folder of a circuit, usually specified from the command line.
    type: string
    default: 'bioname'

  timestamp:
    description: |
      Enforce the timestamp used for the log path, only for internal use.
    type: string
    example: '20210615T123456'

  skip_check_git:
    description: |
      Skip the git checks, only for internal use.
    type: integer
    example: 1

  ngv:
    description: Configuration entries for the NGV workflow.
    type: object
    properties:
      common:
        type: object
        properties:

          parallel:
            description: Enable parallelization.
            type: boolean
            default: true

          seed:
            description: Global seed for random generators.
            type: integer
            default: 0

          atlas:
            description: Atlas folder path.
            type: string

          vasculature:
            description: Path to vasculature skeleton.
            type: string

          vasculature_mesh:
            description: Path to vasculature mesh.
            type: string

      assign_emodels:
        type: object
        properties:

          templated_dir:
            description: Path to directory with hoc templates.
            type: string

          hoc_template:
            description: Template to choose from directory.
            type: string

      cell_placement:
        type: object

        properties:
          density:
            description: Filename of nrrd density dataset in atlas dir to use for placement.
            type: string
            example: '[density]astrocytes'

          soma_radius:
            description: |
              Somata radius truncated normal distribution to sample while placing.

              There are 4 values in the list corresponding to mean, sdev, min, max.
            type: array
            example: [5.6, 0.74, 0.1, 20.0]

          Energy:
            description: Section corresponding to the energy estimation.
            type: object
            properties:
              potentials:
                description: Section for listing energy potentials.
                type: object
                properties:
                  spring:
                    description: |
                        Spring potential of the form k * (x - x0)^2.

                        Two values are provided as a list, k and x0.
                    type: array
                    example: [32.0, 1.0]

          MetropolisHastings:
            properties:

              n_initial:
                description: Initial number of cells to be placed without repulsion.
                type: number

              beta:
                description: Scaling factor for the 1/temperature in the energy calculation.
                type: number
                example: 0.01

              ntrials:
                description: Number of trials before giving up placing a cell.
                type: integer
                example: 3

              cutoff_radius:
                description: Radius beyond which pairwise repulsion is not considered.
                type: number
                example: 60.0

      microdomains:
        type: object
        properties:

          overlap_distribution:
            descrption: The distribution of the overlapping microdomains.
            type: object
            properties:

              type:
                description: Type of overlap distribution (e.g. normal).
                type: string

              values:
                description: Parameters passed into the chosen distribution (e.g. [0.1, 1e-7]).
                type: array
                items:
                  type: number

      gliovascular_connectivity:
          type: object
          properties:

            graph_targeting:
              properties:

                linear_density:
                  description: |
                    Frequency of points to distribution on the vascular skeleton.

                    Units in points per micron.
                  type: number
                  example: 0.17

                connection:
                  type: object
                  properties:

                    reachout_strategy:
                      description: Strategy for connecting to neighboring vascular branches.
                      type: string
                      example: maximum_reachout

                    endfeet_distribution:
                      description: |
                        Number of endfeet per astrocyte truncanted normal (mean, sdev, min, max).
                      type: array
                      items:
                        type: number
                      example: [2, 2, 0, 15]

      endfeet_surface_meshes:
        type: object
        properties:

          fmm_cutoff_radius:
            description: |
              Fast marching method maximum radius of growth for a single seed in microns.
            type: number
            example: 60

          area_distribution:
            description: |
              Target endfeet surface mesh distribution (mean, sdev, min, max).

              The algorithm first grows meshes until converges and then prunes them to
              match the target distribution.

              Units in microns squared.
            type: array
            example: [200, 10, 0, 1000]

          thickness_distribution:
            description: |
              Thickness distribution for endfeet meshes.

              Units in microns.
            type: array
            example: [1.0, 0.1, 0.01, 2.0]

      synthesis:
        type: object
        properties:

          perimeter_distribution:

            description: Distribute perimeters on the astrocytic morphologies.
            type: object
            properties:

              enabled:
                description: If true the distribution of perimeters is activated.
                type: boolean
                default: false

              statistical_model:
                description: |
                  Linear regression model of the form Yi = slope * Xi + intercept + epsilon_i
                  where epsilon_i is an iid following N(0.0, standard_deviation).
                properties:

                  slope:
                    description: Slope of the regression model.
                    type: number

                  intercept:
                    description: Intercept of the regression model.
                    type: number

                  standard_deviation:
                    description: Standard deviation of the noise distribution.
                    type: number

              smoothing:
                type: object
                description: Smoothing of perimeters maintaing the total perimeter of the cell.
                properties:

                  window:
                    description: |
                      The convolution window for smoothing the perimeters of the morphology.

                      For example [1.0, 1.0, 1.0] is a window where each point's perimeter is
                      updated by also considering the two adjacent neighbors.

                      Note that the window is normalized.
                    type: array
                    items:
                      type: number

          resampling:
            description: |
              Resampling of the morphology points.

              Astrocytes have very short branching points, resulting to a small segment length
              used in synthesis. After synthesis, morphologies can be resampled so that longer
              branches do not have a large number of points.
            type: object
            properties:

              enabled:
                description: If true, resampling is activated after synthesizing morphology.
                type: boolean

              linear-density:
                description: |
                  Number of points per micron that are considered to resample the points on
                  the morphology.
                type: number
