.. _ref-phases:

Circuit building phases
=======================

This page describes each phase and the parameters that can be specified
in the configuration file ``MANIFEST.yaml``.

Please refer to :ref:`ref-manifest-yaml` for more information and for an explanation of the
parameters that can be set in the ``common`` section of the file.


.. _ref-phase-init-cells:

init_cells
----------

Generate an empty cell collection in Sonata format. Hereinafter referred to as *Cells*.


.. _ref-phase-place-cells:

place_cells
-----------

Provisions *Cells* with cells positions, orientations and properties.

Properties assigned (in addition to position and orientation):
    - *region*
    - *layer*
    - *mtype*
    - *etype*
    - *morph_class*
    - *synapse_class*

Handled by `BrainBuilder`_: ``brainbuilder cells place``.

.. tip::

    | This phase consumes amount of memory proportional to atlas size times number of mtypes.
    | Please consider increasing allocation memory limit if you are facing "out of memory" errors.


Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/place_cells


.. _ref-phase-choose-morphologies:

choose_morphologies
-------------------

If the ``synthesis`` parameter in the ``common`` section is ``False``, choose morphologies for cell positions using `placement_algorithm`_ ``choose-morphologies``.
This creates the ``morphologies.tsv`` described `here <https://bbpteam.epfl.ch/documentation/projects/placement-algorithm/latest/index.html#choose-morphologies>`_.

If the ``synthesis`` parameter in the ``common`` section is ``True``, pick axons for each position using "placement hints" approach.
In this case it creates the file ``axon-morphologies.tsv``.


.. tip::

    | This task requires at least a two task Slurm allocation.
    | Please make sure you define it in the cluster config accordingly: ie ``-n2``.
    | Also, the memory requirements vary according to the atlas, please follow the process like in :ref:`place_cells <ref-phase-place-cells>`.
    | Scaling should be good, so if this phase is running slow, increasing the number of Slurm tasks will help.

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/choose_morphologies


.. _ref-phase-assign-morphologies:

assign_morphologies
-------------------

Assign morphologies chosen with `choose_morphologies`_ to *Cells* using the `placement_algorithm`_ ``assign-morphologies``.

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/assign_morphologies


.. _ref-phase-synthesize-morphologies:

synthesize_morphologies
-----------------------

Synthesize somas and dendritic trees; graft pre-chosen axons.

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/synthesize_morphologies


.. _ref-phase-assign-emodels:

assign_emodels
--------------

Add *me_combo* property to *Cells*. If **emodel_release** is not specified in ``MANIFEST.yaml`` then
this phase is skipped and the final circuit is not guaranteed to run a simulation.

The morphdb file must be located inside the bioname directory and named ``extNeuronDB.dat``.

Handled by `BrainBuilder`_: ``brainbuilder cells assign-emodels``.

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/assign_emodels


.. _ref-phase-provide-me-info:

provide_me_info
---------------

Provide *Cells* with MorphoElectrical info and saves them as Sonata nodes.

The TSV file containing the ME-combo table must be named ``mecombo_emodel.tsv``
and must be located inside the emodel_release directory specified in the common section
of the configuration.

The ``model_type`` property in the output Sonata nodes is always set to ``biophysical``.

Handled by `BrainBuilder`_: ``brainbuilder sonata provide-me-info``.


.. _ref-phase-node_sets:

node_sets
---------

Generate *node_sets.json* file.

Handled by `BrainBuilder`_: ``brainbuilder targets node-sets``.

Targets generated by default:

* `All`
* `Excitatory` / `Inhibitory`
* `X` for each value `X` of ``mtype`` property
* `X` for each value `X` of ``etype`` property


Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/node_sets


.. _ref-phase-touchdetector:

touchdetector
-------------

Detect touches between neurites using `TouchDetector`_.

.. tip::

    Recommended Slurm allocation (time limit and number of tasks depends on circuit size):

    ::

        -A <proj> -p prod --constraint=cpu -n<tasks> --time <time>

.. warning::

    Unlike nost other phases, ``TouchDetector`` is stateful: i.e., during the run it writes checkpoints to the disk, and automatically resumes from those on restart.

    While it saves a lot of computational time in regular cases when resume from checkpoint is desirable, beware to clean up ``connectome/touches`` folder when you restart `TouchDetector` knowing some input (including `TouchDetector` version itself) has changed.

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/touchdetector


.. _ref-phase-touch2parquet:

touch2parquet
-------------

Convert touches to Parquet format (to use as input for `Spykfunc`_).

.. tip::

    We use MPI-enabled version of the converter; thus it is beneficial to configure an allocation with multiple tasks.
    For instance, the `salloc` key could include:

    ::

        -A <proj> -p prod --constraint=cpu -n200 --time <time>

    as described in `touch2parquet salloc recommendation`_.

.. _ref-phase-spykfunc_s2f:

spykfunc_s2f
------------

Prune touches and convert them into synapses (S2F) using the `Spark Functionalizer`.

.. note::

    Unlike most other phases, pseudo-random generator seed for ``spykfunc_s2f`` phase is not specified in ``MANIFEST.yaml``, but taken from ``builderRecipeAllPathways.xml`` recipe (``synapseSeed`` attribute of ``<Seeds>`` element).

.. tip::

    Recommended Slurm allocation (time limit and number of nodes depend on circuit size):

    ::

        -A <proj> -p prod --constraint=nvme -N <nodes> -c 36--exclusive --mem 0 --time <time>

To provide additional arguments to ``functionalizer``, put those to the :ref:`cluster config <ref-cluster-config>`.
For instance, to disable HDFS mode:

::

    spykfunc_s2f:
        salloc: ...
        functionalizer: '-H'

Please refer to the `Spykfunc`_ documentation for the details.

.. note::

   An experimental feature exists to control which filters are used.
   They can be specified with the key 'filters' with a list of filter names in the spykfunc_s2\* stanza in the ``MANIFEST.yaml``.
   See `FUNCZ-208 <https://bbpteam.epfl.ch/project/issues/browse/FUNCZ-208>`_ for more details

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/spykfunc_s2f


.. _ref-phase-spykfunc_s2s:

spykfunc_s2s
------------

Analogous to ``spykfunc_s2f``, but does not prune touches.

.. _ref-phase-parquet2sonata:

Parameters
~~~~~~~~~~

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/spykfunc_s2s


parquet2sonata
--------------

Convert the `Spykfunc`_ output to SYN2 format.

.. tip::

    We use MPI-enabled version of the converter; thus it is beneficial to configure an allocation with multiple tasks.


.. _ref-phase-subcellular:

subcellular
-----------

Assign gene expressions / protein concentrations to cells.
Handled by `BrainBuilder`_: ``brainbuilder assign``.

Configuration
~~~~~~~~~~~~~~

Since this phase uses the ``entity_management`` package to draw data from Nexus, it is
mandatory to set correctly your Nexus environment variables:

-  NEXUS_TOKEN to "Bearer XXX" with XXX your nexus token from the explorer's `copy token` facility
-  NEXUS_ORG to "ngv" to be able to work inside the ngv project

.. tip::
    To do so with bash just do:

    .. code:: bash

        export NEXUS_TOKEN="Bearer <my_copied_token>"
        export NEXUS_ORG="ngv"

Parameters
~~~~~~~~~~

From now on, the data parameters are directly drawn from Nexus. The data are stored in the
``synprot`` domain (this will change in the future).

.. warning::
    These data should have been uploaded in Nexus using the ``subcellular-querier``
    package. This process ensures that all data are compliant with the dedicated
    ``brainbuilder`` app.

    See: https://bbpteam.epfl.ch/documentation/subcellular-querier-0.0.3/index.html

To retrieve data from nexus, just provide the name of the nexus instance. The code will
automatically look into the correct schemas and download the attachment file.

.. jsonschema:: ../../circuit_build/snakemake/schemas/MANIFEST.yaml#/properties/subcellular

Intermediate files
~~~~~~~~~~~~~~~~~~

Intermediate files will be created in a subcellular directory.
These HDF5 files will be used to create the `subcellular.h5` final file.

functional
----------

Create a `functional`-ized SONATA circuit, based on the ``builderRecipeAllPathways.xml`` file.
This includes pruning the synapses, and parameterizing them.

structural
----------
Create a `structural`-ized SONATA circuit, based on the ``builderRecipeAllPathways.xml`` file.
This includes all synapses that satisfy the rules in the recipe file.


.. _BrainBuilder: https://bbpteam.epfl.ch/documentation/projects/brainbuilder
.. _placement_algorithm: https://bbpteam.epfl.ch/documentation/projects/placement-algorithm
.. _Spykfunc: https://bbpteam.epfl.ch/documentation/projects/spykfunc
.. _TouchDetector: https://bbpteam.epfl.ch/documentation/projects/TouchDetector
.. _touch2parquet salloc recommendation: https://bbpteam.epfl.ch/project/issues/browse/FUNCZ-215?focusedCommentId=90821
